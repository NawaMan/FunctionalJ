
group = theGroup

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    apply plugin: 'signing'
    
    sourceCompatibility = theSourceCompatibility
    targetCompatibility = theTargetCompatibility
    
    repositories {
        mavenLocal()
        mavenCentral()
    }
    
    // Gradle
    task wrapper(type: Wrapper) {
        gradleVersion = '7.5'
    }
    
    // IDE
    
    eclipse {
        classpath {
            downloadJavadoc = true
            downloadSources = true
        }
    }
    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
    
    // Add Javadoc JAR and sources JAR to artifact
    task javadocJar(type: Jar) {
        from javadoc
        classifier = 'javadoc'
    }
    task sourceJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }
    
    // Building/Publishing
    
    ext {
        isSnapshotVersion = project.version.endsWith("-SNAPSHOT")
    }
    
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                
                artifact sourceJar
                artifact javadocJar
                
                pom {
                    name        = 'FunctionalJ.io'
                    description = 'Brining functional goodies to Java'
                    url         = 'https://github.com/NawaMan/FunctionalJ'
                    licenses {
                        license {
                            name = 'MIT License'
                            url  = 'http://www.opensource.org/licenses/MIT'
                        }
                    }
                    developers {
                        developer {
                            id    = 'NawaMan'
                            name  = 'Nawapunth Manusitthipol'
                            email = 'nawa@nawaman.net'
                        }
                    }
                    scm {
                        connection          = 'scm:git:git://github.com/NawaMan/FunctionalJ.git'
                        developerConnection = 'scm:git:ssh://github.com/NawaMan/FunctionalJ.git'
                        url                 = 'http://github.com/NawaMan/FunctionalJ/tree/master'
                    }
                }
            }
        }
        
        repositories {
            maven {
                credentials {
                    username ossrhUsername
                    password ossrhPassword
                }
                
                if (isSnapshotVersion) {
                    url "https://oss.sonatype.org/content/repositories/snapshots/"
                } else {
                    url "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                }
            }
        }
    }
    
    signing {
        sign publishing.publications.mavenJava
    }
    
    javadoc {
        source = sourceSets.main.allJava
        classpath = configurations.compileClasspath
        
        options {
            setMemberLevel JavadocMemberLevel.PUBLIC
            setAuthor true
            
            links "https://docs.oracle.com/javase/8/docs/api/"
        }
    }
    
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-parameters"
            options.compilerArgs << "-Xlint:unchecked"
            options.incremental = true
        }
    }
    
    tasks.withType(Javadoc).all { enabled = false }
    
    // Deploying
    artifacts {
        archives javadocJar, sourceJar
    }
    
    archivesBaseName = "${project.name}"
    version          = "${project.version}"
    
    // == Annotation processor
    
    task compileAnnotationProcessor (type: JavaCompile) {
        options.compilerArgs << "-proc:none"
        options.incremental = true
        
        source               = file("src/main/annotationprocessor")
        destinationDirectory = file('build/classes/java/main')
        classpath            = sourceSets.main.compileClasspath
    }
    
    compileJava.dependsOn                                  compileAnnotationProcessor
    publishMavenJavaPublicationToMavenLocal.dependsOn      javadocJar
    publishMavenJavaPublicationToMavenRepository.dependsOn javadocJar
}