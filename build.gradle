
group = theGroup

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'
    apply plugin: 'maven-publish'
    
    sourceCompatibility = theSourceCompatibility
    targetCompatibility = theTargetCompatibility
    
    repositories {
        mavenLocal()
        mavenCentral()
    }
    
    // Gradle
    task wrapper(type: Wrapper) {
        gradleVersion = '5.4.1'
    }
    
    // IDE
    
    eclipse {
        classpath {
            downloadJavadoc = true
            downloadSources = true
        }
    }
    idea {
        module {
            downloadJavadoc = true
            downloadSources = true
        }
    }
    
    // Add Javadoc JAR and sources JAR to artifact
    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }
    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
    
    task packageJavadoc(type: Jar) {
        from javadoc
        classifier = 'javadoc'
    }
    
    // Building/Publishing
    
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                
                artifact sourceJar
                artifact packageJavadoc
            }
        }
    }
    
    javadoc {
        source = sourceSets.main.allJava
        classpath = configurations.compileClasspath
        
        options {
            setMemberLevel JavadocMemberLevel.PUBLIC
            setAuthor true
            
            links "https://docs.oracle.com/javase/8/docs/api/"
        }
    }
    
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            options.compilerArgs << "-parameters"
            options.compilerArgs << "-Xlint:unchecked"
            options.incremental = true
        }
    }
    
    tasks.withType(Javadoc).all { enabled = false }
    
    // Deploying
    artifacts {
        archives javadocJar, sourceJar
    }
    
    archivesBaseName = "${project.name}"
    version = "${project.version}"
    
    if (project.gradle.startParameter.taskNames.contains('uploadArchives')) {
        
        // Build, sign, and upload
        uploadArchives {
            repositories {
                mavenDeployer {
                    
                    // Signing
                    apply plugin: 'signing'
                    signing {
                        sign configurations.archives
                    }
                    
                    // Sign POM
                    // beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                    
                    // Destination
                    repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                    snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                    
                    // Add required metadata to POM
                    pom.project {
                        name project.name
                        packaging 'jar'
                        description 'Brining functional goodies to Java: ' + project.name
                        url 'https://github.com/NawaMan/FunctionalJ'
                        
                        scm {
                            connection 'scm:git:git://github.com/NawaMan/FunctionalJ.git'
                                developerConnection 'scm:git:ssh://github.com/NawaMan/FunctionalJ.git'
                                url 'http://github.com/NawaMan/FunctionalJ/tree/master'
                        }
                        
                        licenses {
                            license {
                                name 'MIT License'
                                url 'http://www.opensource.org/licenses/MIT'
                            }
                        }
                        
                        developers {
                            developer {
                                id 'NawaMan'
                                name 'Nawapunth Manusitthipol'
                                email 'nawa@nawaman.net'
                                organization 'NawaMan'
                                organizationUrl 'http://nawaman.net'
                            }
                        }
                    }
                }
            }
        }
    }
    
    // == Annotation processor
    
    task compileAnnotationProcessor (type: JavaCompile) {
        options.compilerArgs << "-proc:none"
        options.incremental = true
        
        source         = file("src/main/annotationprocessor")
        destinationDir = file('build/classes/java/main')
        classpath      = sourceSets.main.compileClasspath
    }
    
    compileJava.dependsOn                             compileAnnotationProcessor
    publishMavenJavaPublicationToMavenLocal.dependsOn javadocJar
}